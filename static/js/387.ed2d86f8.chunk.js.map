{"version":3,"file":"static/js/387.ed2d86f8.chunk.js","mappings":"yRAEaA,EAAcC,EAAAA,GAAAA,GAAH,6CAGXC,EAAcD,EAAAA,GAAAA,GAAH,6CAGXE,EAAgBF,EAAAA,GAAAA,GAAH,4CAGbG,EAAcH,EAAAA,GAAAA,EAAH,mF,SC2CxB,EA1CgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,0FACMF,EADN,2CAGgCG,EAAAA,EAAAA,IAAgBH,GAHhD,uBAGcI,EAHd,EAGcA,QACRL,EAAWK,GAJjB,kBAKaA,GALb,kCAOMC,QAAQC,IAAI,KAAMC,SAPxB,2DADc,uBAAC,WAAD,wBAYdC,CAAWR,EACZ,GAAE,CAACA,KAGF,8BACGF,IACC,SAACN,EAAD,UACGM,EAAQW,OAAS,EAChBX,EAAQY,KAAI,SAAAC,GACV,OACE,UAACjB,EAAD,YACE,UAACC,EAAD,sBAAwBgB,EAAOC,WAC/B,SAAChB,EAAD,UAAce,EAAOE,aAFLC,EAAAA,EAAAA,MAKrB,KAED,SAAClB,EAAD,kFAQX,C,uDCpDM,IAkBIkB,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n`;\nexport const ReviewsItem = styled.li`\n  text-align: left;\n`;\nexport const ReviewsAuthor = styled.h2`\n  font-size: 18px;\n`;\nexport const ReviewsText = styled.p`\n  background-color: rgb(225, 233, 235);\n  padding: 20px;\n`;\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsMovie } from 'APIService/API';\nimport { nanoid } from 'nanoid';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsAuthor,\n  ReviewsText,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function addReviews() {\n      if (movieId) {\n        try {\n          const { results } = await getReviewsMovie(movieId);\n          setReviews(results);\n          return results;\n        } catch (error) {\n          console.log(error.message);\n        }\n      }\n    }\n    addReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews && (\n        <ReviewsList>\n          {reviews.length > 0 ? (\n            reviews.map(review => {\n              return (\n                <ReviewsItem key={nanoid()}>\n                  <ReviewsAuthor>Author: {review.author}</ReviewsAuthor>\n                  <ReviewsText>{review.content}</ReviewsText>\n                </ReviewsItem>\n              );\n            })\n          ) : (\n            <ReviewsText>\n              Sorry, there is no information about the reviews for this movie.\n            </ReviewsText>\n          )}\n        </ReviewsList>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsAuthor","ReviewsText","useState","reviews","setReviews","movieId","useParams","useEffect","getReviewsMovie","results","console","log","message","addReviews","length","map","review","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}