{"version":3,"file":"static/js/736.802bdf59.chunk.js","mappings":"qTAEaA,EAAWC,EAAAA,GAAAA,GAAH,2RAYRC,EAAaD,EAAAA,GAAAA,IAAH,sFAKVE,EAAUF,EAAAA,GAAAA,IAAH,oFAKPG,EAAWH,EAAAA,GAAAA,EAAH,wFAKRI,EAAWJ,EAAAA,GAAAA,KAAH,6C,SChBRK,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,0FACMF,EADN,2CAG6BG,EAAAA,EAAAA,IAAaH,GAH1C,uBAGcF,EAHd,EAGcA,KACRC,EAAQD,GAJd,kBAKaA,GALb,kCAOMM,QAAQC,IAAI,KAAMC,SAPxB,2DADc,uBAAC,WAAD,wBAYdC,CAAQP,EACT,GAAE,CAACA,KAGF,gCACGF,IACC,SAACR,EAAD,UACGQ,EAAKU,KAAI,SAAAC,GACR,IAAMC,EAASD,EAAME,aAAN,yCACuBF,EAAME,cACxC,8EACJ,OACE,2BACE,SAACnB,EAAD,WACE,SAACC,EAAD,CAASmB,IAAKF,EAAQG,IAAKJ,EAAMK,UAEnC,UAACpB,EAAD,qBACQ,SAACC,EAAD,UAAWc,EAAMK,WAEzB,UAACpB,EAAD,yBAEE,SAACC,EAAD,UAAWc,EAAMM,kBATZC,EAAAA,EAAAA,MAaZ,OAGL,SAACtB,EAAD,8EAKL,EACD,G,uDC9DO,IAkBIsB,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 20px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const ImgWrapper = styled.div`\n  max-width: 200px;\n  max-height: 300px;\n  margin: 0 auto;\n`;\nexport const CastImg = styled.img`\n  object-fit: cover;\n  max-width: 200px;\n  height: auto;\n`;\nexport const CastInfo = styled.p`\n  font-weight: 500;\n  margin-bottom: 8px;\n  margin-top: 8px;\n`;\nexport const CastName = styled.span`\n  font-weight: 400;\n`;\n","import { nanoid } from 'nanoid';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastMovie } from 'APIService/API';\nimport {\n  CastList,\n  ImgWrapper,\n  CastImg,\n  CastInfo,\n  CastName,\n} from './Cast.styled';\n\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function addCast() {\n      if (movieId) {\n        try {\n          const { cast } = await getCastMovie(movieId);\n          setCast(cast);\n          return cast;\n        } catch (error) {\n          console.log(error.message);\n        }\n      }\n    }\n    addCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <CastList>\n          {cast.map(actor => {\n            const poster = actor.profile_path\n              ? `https://image.tmdb.org/t/p/w300${actor.profile_path}`\n              : 'https://cdn.pixabay.com/photo/2017/04/15/16/59/skeleton-2232884_960_720.jpg';\n            return (\n              <li key={nanoid()}>\n                <ImgWrapper>\n                  <CastImg src={poster} alt={actor.name} />\n                </ImgWrapper>\n                <CastInfo>\n                  Name: <CastName>{actor.name}</CastName>\n                </CastInfo>\n                <CastInfo>\n                  Character:\n                  <CastName>{actor.character}</CastName>\n                </CastInfo>\n              </li>\n            );\n          })}\n        </CastList>\n      )}\n      <CastInfo>\n        Sorry, there is no information about the cast for this movie.\n      </CastInfo>\n    </>\n  );\n};\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["CastList","styled","ImgWrapper","CastImg","CastInfo","CastName","Cast","useState","cast","setCast","movieId","useParams","useEffect","getCastMovie","console","log","message","addCast","map","actor","poster","profile_path","src","alt","name","character","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}